{
	"info": {
		"_postman_id": "8f1716ca-6bf2-423e-8fc1-f19a67518a34",
		"name": "szitakoto",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28149926",
		"_collection_link": "https://www.postman.com/paliandris02/workspace/postman-api-fundamentals-student-expert/collection/28149926-8f1716ca-6bf2-423e-8fc1-f19a67518a34?action=share&source=collection_link&creator=28149926"
	},
	"item": [
		{
			"name": "estimate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('The response should have the required field - value', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.value).to.exist;",
							"})",
							"",
							"pm.test('Value is a non-negative number', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.value).to.be.a('number');",
							"    pm.expect(responseData.value).to.be.at.least(0);",
							"})",
							"",
							"pm.test('Response time is in an acceptable range', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							"",
							"pm.test('Verify the value is within the expected range for an estimate', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.value).to.exist;",
							"    pm.expect(responseData.value).to.be.a('number');",
							"    pm.expect(responseData.value).to.be.equal(2141256);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"value\": 2141255\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:{{port}}/estimate",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"estimate"
					]
				}
			},
			"response": []
		},
		{
			"name": "estimate2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has the required field - value', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('value');",
							"})",
							"",
							"pm.test('Value is a non-negative integer', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.value).to.be.a('number');",
							"    pm.expect(responseData.value).to.be.at.least(0);",
							"})",
							"",
							"pm.test('Response time is less than 500ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							"",
							"pm.test(\"Response value is within expected range\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.value).to.be.a('number');",
							"    pm.expect(responseData.value).to.be.equal(14);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"value\": 13\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:{{port}}/estimate",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"estimate"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "5000",
			"type": "string"
		}
	]
}